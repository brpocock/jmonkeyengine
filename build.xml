<?xml version="1.0" encoding="UTF-8"?>
<!-- You may freely edit this file. See harness/README in the NetBeans platform -->
<!-- for some information on what you could do (e.g. targets to override). -->
<!-- If you delete this file and reopen the project it will be recreated. -->
<project name="jme-gde" basedir=".">
    <description>Builds the module suite jme-gde.</description>
    <import file="nbproject/build-impl.xml"/>
    <!--TODO: using the evil for loop from ant-contrib for loops and if, change that..-->
    <taskdef resource="net/sf/antcontrib/antcontrib.properties">
        <classpath>
            <pathelement location="ant-lib/ant-contrib.jar"/>
        </classpath>
    </taskdef>

    <target name="dist-gde" depends="suite.clean, zip-templates, -set-impl-version, suite.build-zip, build-mac, unset-impl-version">
        <exec executable="zip" dir="dist/">
            <arg value="-yr"/>
            <arg value="jmonkeyplatform-osx.zip"/>
            <arg value="jmonkeyplatform.app"/>
        </exec>
    </target>

    <target name="dist-gde-hudson" depends="suite.clean, zip-templates, -set-impl-version-hudson, suite.nbms, unset-impl-version-hudson">
    </target>

    <!--zips up the templates and adds them to the template project-->
    <target name="zip-templates" description="Updates the template zip files">
        <zip basedir="BasicGameTemplate/" destfile="jme3-templates/src/com/jme3/gde/templates/BasicGameProject.zip">
            <exclude name="**/build/"/>
            <exclude name="**/dist/"/>
            <exclude name="**/nbproject/private/"/>
        </zip>
        <zip basedir="JME3TestsTemplate/" destfile="jme3-tests-template/src/com/jme3/gde/templates/tests/JmeTestsProject.zip">
            <exclude name="**/build/"/>
            <exclude name="**/dist/"/>
            <exclude name="**/nbproject/private/"/>
        </zip>
    </target>

    <target name="-set-impl-version">
        <property file="nbproject/project.properties"/>
        <property value="../jme3/" name="jme3_dir"/>
        <property value="true" name="set_impl_version"/>
        <antcall target="-create-jme3-svn-properties" inheritall="true"/>
        <foreach target="-do-impl-version" list="${modules}" delimiter=":" param="module_dir" inheritall="true"/>
    </target>

    <target name="unset-impl-version">
        <property file="nbproject/project.properties"/>
        <property value="../jme3/" name="jme3_dir"/>
        <property value="true" name="unset_impl_version"/>
        <antcall target="-create-jme3-svn-properties" inheritall="true"/>
        <foreach target="-do-impl-version" list="${modules}" delimiter=":" param="module_dir" inheritall="true"/>
    </target>

    <target name="-set-impl-version-hudson">
        <property file="nbproject/project.properties"/>
        <property value="../../jme3/workspace/" name="jme3_dir"/>
        <property value="true" name="set_impl_version"/>
        <antcall target="-create-jme3-svn-properties" inheritall="true"/>
        <foreach target="-do-impl-version" list="${modules}" delimiter=":" param="module_dir" inheritall="true"/>
    </target>

    <target name="unset-impl-version-hudson">
        <property file="nbproject/project.properties"/>
        <property value="../../jme3/workspace/" name="jme3_dir"/>
        <property value="true" name="unset_impl_version"/>
        <antcall target="-create-jme3-svn-properties" inheritall="true"/>
        <foreach target="-do-impl-version" list="${modules}" delimiter=":" param="module_dir" inheritall="true"/>
    </target>

    <!--sets/unsets implementation version to svn revision for plugins-->
    <target name="-do-impl-version">
        <!--load correct svn properties for project-->
        <if>
            <or>
                <equals arg1="${module_dir}" arg2="jme3-core-libraries"/>
                <equals arg1="${module_dir}" arg2="jme3-project-libraries"/>
            </or>
            <then>
                <!--set jme3 svn revision for these projects-->
                <property prefix="svn" file="build/jme3-lib-svn.properties"/>
            </then>
            <else>
                <if>
                    <or>
                        <equals arg1="${module_dir}" arg2="jme3-core-baselibs"/>
                        <equals arg1="${module_dir}" arg2="jme3-project-baselibs"/>
                        <equals arg1="${module_dir}" arg2="jme3-tests-template"/>
                    </or>
                    <then>
                        <!--set jme3-testdata svn revision for this project-->
                        <property prefix="svn" file="build/jme3-svn.properties"/>
                    </then>
                    <else>
                        <if>
                            <equals arg1="${module_dir}" arg2="jme3-project-testdata"/>
                            <then>
                                <!--set jme3-testdata svn revision for this project-->
                                <property prefix="svn" file="build/jme3-testdata-svn.properties"/>
                            </then>
                            <else>
                                <!--load and set svn revision of this projects folder for this project-->
                                <exec executable="svn" output="build/${module_dir}-svn.properties" dir="${module_dir}">
                                    <arg value="info" />
                                </exec>
                                <replace file="build/${module_dir}-svn.properties" token="Last Changed Rev" value="Lastchange"/>
                                <property prefix="svn" file="build/${module_dir}-svn.properties"/>
                            </else>
                        </if>
                    </else>
                </if>
            </else>
        </if>

        <if>
            <equals arg1="${unset_impl_version}" arg2="true"/>
            <then>
                <echo>Removing implementation version for ${module_dir} from revision: ${svn.Lastchange}</echo>
                <replace file="${module_dir}/manifest.mf" token="OpenIDE-Module-Implementation-Version: ${svn.Lastchange}" value="OpenIDE-Module-Implementation-Version: 0"/>
            </then>
            <elseif>
                <equals arg1="${set_impl_version}" arg2="true"/>
                <then>
                    <echo>Setting implementation version for ${module_dir} to revision: ${svn.Lastchange}</echo>
                    <replace  file="${module_dir}/manifest.mf" token="OpenIDE-Module-Implementation-Version: 0" value="OpenIDE-Module-Implementation-Version: ${svn.Lastchange}"/>
                </then>
            </elseif>
        </if>

    </target>

    <!--creates properties files containing svn info for the jme3 folders-->
    <target name="-create-jme3-svn-properties">
        <mkdir dir="build"/>
        <!--jme3 svn properties-->
        <exec executable="svn" dir="${jme3_dir}" output="build/jme3-svn.properties">
            <arg value="info" />
        </exec>
        <replace file="build/jme3-svn.properties" token="Last Changed Rev" value="Lastchange"/>
        <!--jme3 test data svn properties-->
        <exec executable="svn" dir="${jme3_dir}/src/test-data/" output="build/jme3-testdata-svn.properties">
            <arg value="info" />
        </exec>
        <replace file="build/jme3-testdata-svn.properties" token="Last Changed Rev" value="Lastchange"/>
        <!--jme3 libraries svn properties-->
        <exec executable="svn" dir="${jme3_dir}/lib/" output="build/jme3-lib-svn.properties">
            <arg value="info" />
        </exec>
        <replace file="build/jme3-lib-svn.properties" token="Last Changed Rev" value="Lastchange"/>
    </target>

    <!--overriding mac build target to copy icon-->
    <target name="build-mac" depends="suite.build-mac, -copy-mac-icon" description="Build Mac OS X Application">
    </target>

    <!--copy mac icon-->
    <target name="-copy-mac-icon">
        <echo>Copy mac icon..</echo>
        <property name="nbdist-contents.dir" value="${dist.dir}/${app.name}.app/Contents"/>
        <property name="nbdist-resources.dir" value="${nbdist-contents.dir}/Resources"/>
        <!-- Replace the icns file. -->
        <delete file="${nbdist-resources.dir}/${app.name}.icns"/>
        <copy tofile="${nbdist-resources.dir}/${app.name}.icns" file="${app.name}.icns" />
    </target>

</project>
