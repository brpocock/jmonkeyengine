package g3dtools.deploy;

import com.g3d.asset.pack.J3PCreator;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.util.Enumeration;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.ProgressMonitor;
import javax.swing.SwingWorker;
import javax.swing.UIManager;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;

public class PackerFrame extends javax.swing.JFrame {

    private DefaultListModel fileListModel = new DefaultListModel();
    private JFileChooser chooser = new JFileChooser();
    private FileFilter archiveFilter =
            new FileNameExtensionFilter("Supported archives (*.zip, *.jar)",
                                        "zip", "jar");
    private FileFilter j3pFilter =
            new FileNameExtensionFilter("jME3 Package (*.j3p)", "j3p");

    private J3PCreator creator = new J3PCreator();
    private ProgressMonitor monitor;
    private PackerWorker worker;

    public PackerFrame() {
        initComponents();
        setLocationRelativeTo(null);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlSrcFiles = new javax.swing.JPanel();
        scrFiles = new javax.swing.JScrollPane();
        lstFiles = new javax.swing.JList();
        btnFolder = new javax.swing.JButton();
        btnArchive = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        btnGenerate = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("jME3 Package Creator");

        pnlSrcFiles.setBorder(javax.swing.BorderFactory.createTitledBorder("Source files"));

        lstFiles.setModel(fileListModel);
        scrFiles.setViewportView(lstFiles);

        btnFolder.setText("Add Folder ...");
        btnFolder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFolderActionPerformed(evt);
            }
        });

        btnArchive.setText("Add Archive ...");
        btnArchive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnArchiveActionPerformed(evt);
            }
        });

        btnRemove.setText("Remove Selected");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlSrcFilesLayout = new javax.swing.GroupLayout(pnlSrcFiles);
        pnlSrcFiles.setLayout(pnlSrcFilesLayout);
        pnlSrcFilesLayout.setHorizontalGroup(
            pnlSrcFilesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlSrcFilesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlSrcFilesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(scrFiles, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 494, Short.MAX_VALUE)
                    .addGroup(pnlSrcFilesLayout.createSequentialGroup()
                        .addComponent(btnFolder)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnArchive)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 169, Short.MAX_VALUE)
                        .addComponent(btnRemove)))
                .addContainerGap())
        );
        pnlSrcFilesLayout.setVerticalGroup(
            pnlSrcFilesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlSrcFilesLayout.createSequentialGroup()
                .addComponent(scrFiles, javax.swing.GroupLayout.DEFAULT_SIZE, 241, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlSrcFilesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnFolder)
                    .addComponent(btnArchive)
                    .addComponent(btnRemove))
                .addContainerGap())
        );

        btnGenerate.setText("Generate");
        btnGenerate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(pnlSrcFiles, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnGenerate))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlSrcFiles, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnGenerate)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnFolderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFolderActionPerformed
        chooser.setAcceptAllFileFilterUsed(true);
        chooser.setDialogTitle("Add Folder ...");
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.setMultiSelectionEnabled(true);
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION){
            File[] files = chooser.getSelectedFiles();
            for (File file : files){
                if (file.isDirectory() && file.exists()){
                    fileListModel.addElement(file);
                }
            }
        }
    }//GEN-LAST:event_btnFolderActionPerformed

    private void btnArchiveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnArchiveActionPerformed
        chooser.setAcceptAllFileFilterUsed(false);
        chooser.setFileFilter(archiveFilter);
        chooser.setDialogTitle("Add Archive ...");
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        chooser.setMultiSelectionEnabled(true);
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION){
            File[] files = chooser.getSelectedFiles();
            for (File file : files){
                if (file.isFile() && file.exists()){
                    fileListModel.addElement(file);
                }
            }
        }
    }//GEN-LAST:event_btnArchiveActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        int[] indicies = lstFiles.getSelectedIndices();
        for (int index : indicies){
            fileListModel.removeElementAt(index);
        }
    }//GEN-LAST:event_btnRemoveActionPerformed

    private void addFileEntry(File rootDirectory, File file){
        URI fileUri = file.toURI();
        URI dirUri = rootDirectory.toURI();
        URI relativeUri = dirUri.relativize(fileUri);

        String name = relativeUri.getPath();
        long size = file.length();

        try{
            InputStream stream = new FileInputStream(file);
            creator.addEntry(name, size, stream);
        } catch (FileNotFoundException ex){
        }
    }

    private void addEntriesInDirectory(File rootDirectory, File directory){
        for (File file : directory.listFiles()){
            if (file.isDirectory()){
                addEntriesInDirectory(rootDirectory, file);
            }else if (file.isFile()){
                addFileEntry(rootDirectory, file);
            }
        }
    }

    private void addEntriesInZip(File file){
        try{
            ZipFile zf = new ZipFile(file, ZipFile.OPEN_READ);
            Enumeration<? extends ZipEntry> entries = zf.entries();
            while (entries.hasMoreElements()){
                ZipEntry entry = entries.nextElement();
                InputStream stream = zf.getInputStream(entry);
                creator.addEntry(entry.getName(), entry.getSize(), stream);
                // the stream will be closed automatically
                // upon a call to creator.finish()
            }
        }catch (IOException ex){
            JOptionPane.showMessageDialog(this,
                    "Error while processing ZIP file "+file.getName()+": " + ex.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void btnGenerateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerateActionPerformed
        if (fileListModel.size() == 0){
            JOptionPane.showMessageDialog(this, 
                    "Please add some files first!", 
                    "Error", 
                    JOptionPane.ERROR_MESSAGE);
            return;
        }else if (worker != null && !worker.isDone()){
            JOptionPane.showMessageDialog(this,
                    "Please wait until the current task is completed.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        chooser.setAcceptAllFileFilterUsed(true);
        chooser.setFileFilter(j3pFilter);
        chooser.setDialogTitle("Save Package ...");
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        chooser.setMultiSelectionEnabled(false);
        if (chooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION){
            for (int i = 0; i < fileListModel.size(); i++){
                File file = (File) fileListModel.get(i);
                if (file.isDirectory()){
                    addEntriesInDirectory(file, file);
                }else{
                    addEntriesInZip(file);
                }
            }

            File outFile = chooser.getSelectedFile();
            if (!outFile.getName().toLowerCase().endsWith(".j3p")){
                outFile = new File(outFile + ".j3p");
            }

            monitor = new ProgressMonitor(this, "Exporting J3P..", "", 0, 1);
            monitor.setMillisToPopup(0);
            monitor.setMillisToDecideToPopup(0);
            worker = new PackerWorker(creator, outFile, monitor);
            worker.execute();
        }
    }//GEN-LAST:event_btnGenerateActionPerformed

    public static void main(String args[]) {
        try{
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        }catch (Throwable ex){
        }

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PackerFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnArchive;
    private javax.swing.JButton btnFolder;
    private javax.swing.JButton btnGenerate;
    private javax.swing.JButton btnRemove;
    private javax.swing.JList lstFiles;
    private javax.swing.JPanel pnlSrcFiles;
    private javax.swing.JScrollPane scrFiles;
    // End of variables declaration//GEN-END:variables

}
